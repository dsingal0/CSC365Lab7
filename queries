FR1: 
-- rooms sorted by popularity desc  
-- popularity = occupany for the last 180 days  
-- replace '2010-10-23' with curdate()
WITH threemonthoverlap 
     AS (SELECT code, 
                room, 
                rate, 
                checkin, 
                checkout, 
                Least(Datediff(checkout, checkin), 
                Datediff(checkout, Date_sub('2010-10-23', 
                                   interval 180 day)), 
                Datediff('2010-10-23', checkin), 
                Datediff('2010-10-23', Date_sub('2010-10-23', 
                                       interval 180 day))) AS 
                overlap 
         FROM   reservations res 
         WHERE  checkin <= '2010-10-23' 
                AND checkout >= Date_sub('2010-10-23', interval 180 day)), 
     roompopularity 
     AS (SELECT room, 
                Round(SUM(overlap) / 180, 2) AS popularity 
         FROM   threemonthoverlap t 
         GROUP  BY room), 
     roomavailability 
     AS (SELECT room, 
                Greatest('2010-10-23', Max(checkout)) AS nextAvailable 
         FROM   reservations res 
         WHERE  checkin <= '2010-10-23' 
                AND checkout >= Date_sub('2010-10-23', interval 180 day) 
         GROUP  BY room), 
     latestduration 
     AS (SELECT room, 
                Datediff(Max(checkout), Max(checkin)) AS duration 
         FROM   reservations res 
         GROUP  BY room) 
SELECT rp.room, 
       popularity, 
       nextavailable, 
       duration 
FROM   roompopularity rp 
       inner join roomavailability ra 
               ON rp.room = ra.room 
       inner join latestduration ld 
               ON ld.room = ra.room 
ORDER  BY popularity DESC;
FR2:
-- find rooms by totalCapacity 
-- replace 2 with number of adults and 
-- 1 with number of children 
-- room, bed type, beginDate, endDate 
-- when passing in the roomcode and decor, pass them as '%' if Any 
-- replace '2010-10-23' with startDate and '2010-10-25' with endDate 
-- for the insert statement to add a reservation, have the new reservation code be maxResCode, which is the last column of the returned table from the query +1. Therefore,
-- rescode of new reservation = maxRescode+1
WITH bigenoughrooms AS (
  (
    SELECT 
      roomcode, 
      roomname, 
      baseprice, 
      decor, 
      bedtype 
    FROM 
      rooms r 
    WHERE 
      r.maxocc >= (2 + 1)
  )
), 
decorcoderooms AS (
  SELECT 
    roomcode 
  FROM 
    bigenoughrooms 
  WHERE 
    roomcode LIKE '%' 
    OR decor LIKE '%'
), 
alloverlap AS (
  SELECT 
    roomcode, 
    roomname, 
    checkin, 
    checkout, 
    baseprice, 
    Least(
      Datediff(checkout, checkin), 
      Datediff(checkout, '2010-10-23'), 
      Datediff('2010-10-25', checkin), 
      Datediff('2010-10-25', '2010-10-23')
    ) AS overlap 
  FROM 
    bigenoughrooms b 
    INNER JOIN reservations res ON res.room = b.roomcode
), 
roomoverlap AS (
  SELECT 
    roomcode, 
    roomname, 
    baseprice, 
    Max(
      Least(
        Datediff(checkout, checkin), 
        Datediff(checkout, '2010-10-23'), 
        Datediff('2010-10-25', checkin), 
        Datediff('2010-10-25', '2010-10-23')
      )
    ) AS overlap 
  FROM 
    bigenoughrooms b 
    INNER JOIN reservations res ON res.room = b.roomcode 
  GROUP BY 
    roomcode
), 
idealrooms AS (
  SELECT 
    r.roomcode, 
    r.roomname, 
    r.baseprice, 
    '2010-10-23' AS startdate, 
    '2010-10-25' AS enddate 
  FROM 
    decorcoderooms d 
    INNER JOIN roomoverlap r ON r.roomcode = d.roomcode 
  WHERE 
    overlap <= 0
), 
nonidealroomsnooverlap AS (
  SELECT 
    r.roomcode, 
    r.roomname, 
    r.baseprice, 
    '2010-10-23' AS startdate, 
    '2010-10-25' AS enddate 
  FROM 
    bigenoughrooms b 
    INNER JOIN roomoverlap r ON r.roomcode = b.roomcode 
  WHERE 
    overlap <= 0
) (
  SELECT 
    *, 
    (
      select 
        max(code) 
      from 
        reservations
    ) as maxResCode 
  FROM 
    idealrooms
) 
UNION ALL 
  (
    SELECT 
      *, 
      (
        select 
          max(code) 
        from 
          reservations
      ) as maxResCode 
    FROM 
      nonidealroomsnooverlap
  ) 
UNION ALL 
  (
    SELECT 
      roomcode, 
      roomname, 
      baseprice, 
      Max(checkout) AS startdate, 
      date_add(
        Max(checkout), 
        interval datediff('2010-10-25', '2010-10-23') day
      ) AS enddate, 
      (
        select 
          max(code) 
        from 
          reservations
      ) as maxResCode 
    FROM 
      bigenoughrooms b 
      INNER JOIN reservations r ON r.room = b.roomcode 
    GROUP BY 
      roomcode
  ) 
limit 
  5;

Insert statement sample
insert into reservations value (
  'Dhruv', 
  'Singal', 
  'AOB', 
  'Abscond or bolster', 
  'Queen', 
  '2010-10-23', 
  '2010-10-25', 
  2, 
  2, 
  1.18 *(
    numWeekdays * baseprice + numWeekends * baseprice * 1.1
  )
);












FR3: 
-- First query for the roomcode.
-- Then check which attributes they’re changing. For attributes with NO_CHANGE, remove them from the update query.
-- If they decide to change the dates, run the first query to check if there are any conflicts. It should return an empty tuple if there aren’t any conflicts, after which you can go ahead and run query 2.
-- in case they change dates
select 
  * 
from 
  reservations r 
where 
  room =(
    select 
      room 
    from 
      reservations rt 
    where 
      rt.code = 99863
  ) 
  and checkin < (
    select 
      checkout 
    from 
      reservations rt 
    where 
      rt.code = 99863
  ) 
  AND checkout >= (
    select 
      checkin 
    from 
      reservations rt 
    where 
      rt.code = 99863
  ) 
  and code <> 99863;
-- update table with new data
update 
  reservations 
set 
  firstname = 'Dhruv', 
  lastname = 'Singal', 
  checkin = '2010-10-23', 
  checkout = '2010-10-25', 
  kids = 2, 
  adults = 2 
where 
  code = 99863;

FR5: 
-- replace the the ‘%’ with ‘GL%’ if the user wants the attribute like. If the user leaves the selection attribute empty, keep the ‘%’
-- for dates, mysql min date is 1901 and max date is 2155. For date ranges for the user, replace ‘1901-00-00’ with startDate, and ‘2155-00-00’ with endDate. If any of the dates aren’t provided by the user, keep the default value of ‘1901-00-00’ and ‘2155-00-00’

select 
  * 
from 
  reservations r 
  inner join rooms rm on rm.roomcode = r.room 
where 
  r.firstname like '%' 
  and r.lastname like '%' 
  and r.code like '%' 
  and r.room like '%' 
  and r.checkin between '1901-00-00' 
  and '2155-00-00';

FR6:
--the annualRevenue column is the annual cumulative revenue from the room throughout the year
-- to get the revenue by month, use the checkinMonth and checkoutMonth.
-- checkinMonth and checkoutMonth are month numbers: eg January is 1
-- dayOfMonthCheckin and dayOfMonthCheckout are days of the month, eg 19 for 2010-10-19
-- if checkinMonth==checkoutMonth: revenue for all other months is 0, and the revenue for checkinMonth is numDays*rate
-- if checkinMonth !=checkoutMonth: revenue for checkinMonth is 
(number of days in checkinMonth-dayofMonthCheckin)*rate,
revenue for checkoutMonth is
(number of days in checkoutMonth-dayofMonthCheckout)*rate,
and if checkoutMonth-checkinMonth>1: then the revenue for all the months in between is going to be (number of days in the month)*rate

with annualRevByRoom as (
  select 
    res.room, 
    sum(
      rate * datediff(checkout, checkin)
    ) as revenue 
  from 
    reservations res 
  group by 
    res.room
) 
select 
  code, 
  res.room, 
  checkin, 
  checkout, 
  rate, 
  month(checkin) as checkinMonth, 
  month(checkout) as checkoutMonth, 
  datediff(checkout, checkin) as numDays, 
  day(checkin) as dayOfMonthCheckin, 
  day(checkout) as dayOfMonthCheckout, 
  revenue as annualRevenue 
from 
  reservations res 
  inner join annualRevByRoom a on a.room = res.room 
order by 
  res.room;


